<svg xmlns="http://www.w3.org/2000/svg" xml:space="preserve" style="enable-background:new 0 0 64 64" viewBox="0 0 64 80"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><path d="M62 25h-5v-3a1 1 0 0 0-1-1h-1v-3a1 1 0 0 0-1-1h-3v2h2v2h-6v-4h-2v4h-6v-2h2v-2h-3a1 1 0 0 0-1 1v3h-1a1 1 0 0 0-1 1v3h-6v-3a1 1 0 0 0-1-1h-1v-3a1 1 0 0 0-1-1h-3v2h2v2h-6v-4h-2v4h-6v-2h2v-2h-3a1 1 0 0 0-1 1v3H8a1 1 0 0 0-1 1v3H2a1 1 0 0 0-1 1v36a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1v-5h46v5a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V26a1 1 0 0 0-1-1zM7 27h50v2H7v-2zm30-4h18v2H37v-2zM9 23h18v2H9v-2zm37 32H18V45h28v10zm15 6h-4v-5a1 1 0 0 0-1-1h-8V44a1 1 0 0 0-1-1H17a1 1 0 0 0-1 1v11H8a1 1 0 0 0-1 1v5H3V27h2v3a1 1 0 0 0 1 1h52a1 1 0 0 0 1-1v-3h2v34zM14.707 10.121c.187.187.293.444.293.707v.344c0 .263-.106.521-.293.707l-1.414 1.414 1.414 1.414 1.414-1.414c.567-.566.879-1.32.879-2.121v-.344c0-.801-.312-1.555-.879-2.121l-.828-.828A1.005 1.005 0 0 1 15 7.172v-.344c0-.263.106-.521.293-.707l1.414-1.414-1.414-1.414-1.414 1.414A2.978 2.978 0 0 0 13 6.828v.344c0 .801.312 1.555.879 2.121l.828.828zM20.707 8.121c.187.187.293.444.293.707v.344c0 .263-.106.521-.293.707l-1.414 1.414 1.414 1.414 1.414-1.414c.567-.566.879-1.32.879-2.121v-.344c0-.801-.312-1.555-.879-2.121l-.828-.828A1.005 1.005 0 0 1 21 5.172v-.344c0-.263.106-.521.293-.707l1.414-1.414-1.414-1.414-1.414 1.414A2.978 2.978 0 0 0 19 4.828v.344c0 .801.312 1.555.879 2.121l.828.828zM42.707 10.121c.187.187.293.444.293.707v.344c0 .263-.106.521-.293.707l-1.414 1.414 1.414 1.414 1.414-1.414c.567-.566.879-1.32.879-2.121v-.344c0-.801-.312-1.555-.879-2.121l-.828-.828A1.005 1.005 0 0 1 43 7.172v-.344c0-.263.106-.521.293-.707l1.414-1.414-1.414-1.414-1.414 1.414A2.978 2.978 0 0 0 41 6.828v.344c0 .801.312 1.555.879 2.121l.828.828zM48.707 8.121c.187.187.293.444.293.707v.344c0 .263-.106.521-.293.707l-1.414 1.414 1.414 1.414 1.414-1.414c.567-.566.879-1.32.879-2.121v-.344c0-.801-.312-1.555-.879-2.121l-.828-.828A1.005 1.005 0 0 1 49 5.172v-.344c0-.263.106-.521.293-.707l1.414-1.414-1.414-1.414-1.414 1.414A2.978 2.978 0 0 0 47 4.828v.344c0 .801.312 1.555.879 2.121l.828.828z"/><path d="M17 33c-2.206 0-4 1.794-4 4s1.794 4 4 4 4-1.794 4-4-1.794-4-4-4zm0 6c-1.103 0-2-.897-2-2s.897-2 2-2 2 .897 2 2-.897 2-2 2zM47 33c-2.206 0-4 1.794-4 4s1.794 4 4 4 4-1.794 4-4-1.794-4-4-4zm0 6c-1.103 0-2-.897-2-2s.897-2 2-2 2 .897 2 2-.897 2-2 2zM9 33h2v2H9zM9 39h2v2H9zM5 33h2v2H5zM5 39h2v2H5zM57 33h2v2h-2zM57 39h2v2h-2zM53 33h2v2h-2zM53 39h2v2h-2zM40 35H24a1 1 0 0 0-1 1v4a1 1 0 0 0 1 1h16a1 1 0 0 0 1-1v-4a1 1 0 0 0-1-1zm-1 4H25v-2h14v2zM22 47h20v2H22z"/></svg>